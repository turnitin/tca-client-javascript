/**
 * Turnitin Core API
 * Turnitin Core API (TCA) provides direct API access to the core functionality provided by Turnitin. TCA supports file submission, similarity report generation, group management, and visualization of report matches via Cloud Viewer or PDF download. Below is the full flow to successfully set up an integration scope, an API Key, and make calls to TCA. Integration Scope and API Key management is done via the Admin Console UI by logging in as an admin user. For more details, go to our [developer portal documentation page](https://developers.turnitin.com/docs). ## Integration Scope and API Key Management TCA API calls must provide an API Key for authentication, so you must first have at least one integration scope associated with at least one API Key to use TCA. ### Admin Console UI First, login to Admin Console UI as an *Admin* user with permission to create Integration Scopes, under a tenant that is licensed to use the TCA product Integration Scopes (you can create a new one, or add keys to existing)    * Click `Integrations` in the side bar --> `+ Add Integration` at top the top of the page --> Enter a name --> `Add` Button   API Keys   * Click `Integrations` in the side bar --> `Create API Key` Button next to a given Integration Scope -->   Enter a name --> click `Create and View button`   * Copy/Save the key manually or click save to clipboard button to copy it (this is the only time it will show)  ## TCA Flow    *  Register a webhook   *  Create a submission   *  Upload a file for the submission   *  Wait for the submission upload to process      * If you registered a webhook, a callback will be sent to it when upload is complete      * The status of the *submission* will also update to `COMPLETE`   *  Request a Similarity Report   *  Wait for similarity report to process      * If you registered a webhook, a callback will be sent to it when report is complete      * The status of the *report* will also be updated to `COMPLETE`   *  Request a URL with parameters to view the Similarity Report 
 *
 * The version of the OpenAPI document: 1.0.226
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddGroupAttachmentRequest from '../model/AddGroupAttachmentRequest';
import AddGroupAttachmentResponse from '../model/AddGroupAttachmentResponse';
import AggregateGroup from '../model/AggregateGroup';
import Error from '../model/Error';
import GroupAttachmentResponse from '../model/GroupAttachmentResponse';
import InlineResponse200 from '../model/InlineResponse200';
import RateLimitError from '../model/RateLimitError';
import SubmissionSizeError from '../model/SubmissionSizeError';
import SuccessMessage from '../model/SuccessMessage';

/**
* Groups service.
* @module api/GroupsApi
* @version 1.0.226
*/
export default class GroupsApi {

    /**
    * Constructs a new GroupsApi. 
    * @alias module:api/GroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addGroupAttachment operation.
     * @callback module:api/GroupsApi~addGroupAttachmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddGroupAttachmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add attachment to a group. will create a group if it does not exist.
     * @param {String} xTurnitinIntegrationName a human readable string representing the type of integration being used
     * @param {String} xTurnitinIntegrationVersion the version of the integration platform being used
     * @param {String} groupId group_id
     * @param {module:model/AddGroupAttachmentRequest} data 
     * @param {module:api/GroupsApi~addGroupAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddGroupAttachmentResponse}
     */
    addGroupAttachment(xTurnitinIntegrationName, xTurnitinIntegrationVersion, groupId, data, callback) {
      let postBody = data;
      // verify the required parameter 'xTurnitinIntegrationName' is set
      if (xTurnitinIntegrationName === undefined || xTurnitinIntegrationName === null) {
        throw new Error("Missing the required parameter 'xTurnitinIntegrationName' when calling addGroupAttachment");
      }
      // verify the required parameter 'xTurnitinIntegrationVersion' is set
      if (xTurnitinIntegrationVersion === undefined || xTurnitinIntegrationVersion === null) {
        throw new Error("Missing the required parameter 'xTurnitinIntegrationVersion' when calling addGroupAttachment");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling addGroupAttachment");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling addGroupAttachment");
      }

      let pathParams = {
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Turnitin-Integration-Name': xTurnitinIntegrationName,
        'X-Turnitin-Integration-Version': xTurnitinIntegrationVersion
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddGroupAttachmentResponse;
      return this.apiClient.callApi(
        '/groups/{group_id}/attachments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGroupAttachment operation.
     * @callback module:api/GroupsApi~deleteGroupAttachmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Hard delete group attachment
     * @param {String} xTurnitinIntegrationName a human readable string representing the type of integration being used
     * @param {String} xTurnitinIntegrationVersion the version of the integration platform being used
     * @param {String} groupId group_id
     * @param {String} attachId The attachment ID (returned from a successful group attachment request) 
     * @param {module:api/GroupsApi~deleteGroupAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteGroupAttachment(xTurnitinIntegrationName, xTurnitinIntegrationVersion, groupId, attachId, callback) {
      let postBody = null;
      // verify the required parameter 'xTurnitinIntegrationName' is set
      if (xTurnitinIntegrationName === undefined || xTurnitinIntegrationName === null) {
        throw new Error("Missing the required parameter 'xTurnitinIntegrationName' when calling deleteGroupAttachment");
      }
      // verify the required parameter 'xTurnitinIntegrationVersion' is set
      if (xTurnitinIntegrationVersion === undefined || xTurnitinIntegrationVersion === null) {
        throw new Error("Missing the required parameter 'xTurnitinIntegrationVersion' when calling deleteGroupAttachment");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling deleteGroupAttachment");
      }
      // verify the required parameter 'attachId' is set
      if (attachId === undefined || attachId === null) {
        throw new Error("Missing the required parameter 'attachId' when calling deleteGroupAttachment");
      }

      let pathParams = {
        'group_id': groupId,
        'attach_id': attachId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Turnitin-Integration-Name': xTurnitinIntegrationName,
        'X-Turnitin-Integration-Version': xTurnitinIntegrationVersion
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/groups/{group_id}/attachments/{attach_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroup operation.
     * @callback module:api/GroupsApi~getGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AggregateGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get group, group context and group context owners info
     * @param {String} xTurnitinIntegrationName a human readable string representing the type of integration being used
     * @param {String} xTurnitinIntegrationVersion the version of the integration platform being used
     * @param {String} groupId group_id
     * @param {module:api/GroupsApi~getGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AggregateGroup}
     */
    getGroup(xTurnitinIntegrationName, xTurnitinIntegrationVersion, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'xTurnitinIntegrationName' is set
      if (xTurnitinIntegrationName === undefined || xTurnitinIntegrationName === null) {
        throw new Error("Missing the required parameter 'xTurnitinIntegrationName' when calling getGroup");
      }
      // verify the required parameter 'xTurnitinIntegrationVersion' is set
      if (xTurnitinIntegrationVersion === undefined || xTurnitinIntegrationVersion === null) {
        throw new Error("Missing the required parameter 'xTurnitinIntegrationVersion' when calling getGroup");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getGroup");
      }

      let pathParams = {
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Turnitin-Integration-Name': xTurnitinIntegrationName,
        'X-Turnitin-Integration-Version': xTurnitinIntegrationVersion
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AggregateGroup;
      return this.apiClient.callApi(
        '/groups/{group_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupAttachment operation.
     * @callback module:api/GroupsApi~getGroupAttachmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupAttachmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get group attachment
     * @param {String} xTurnitinIntegrationName a human readable string representing the type of integration being used
     * @param {String} xTurnitinIntegrationVersion the version of the integration platform being used
     * @param {String} groupId group_id
     * @param {String} attachId The attachment ID (returned from a successful group attachment request) 
     * @param {module:api/GroupsApi~getGroupAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupAttachmentResponse}
     */
    getGroupAttachment(xTurnitinIntegrationName, xTurnitinIntegrationVersion, groupId, attachId, callback) {
      let postBody = null;
      // verify the required parameter 'xTurnitinIntegrationName' is set
      if (xTurnitinIntegrationName === undefined || xTurnitinIntegrationName === null) {
        throw new Error("Missing the required parameter 'xTurnitinIntegrationName' when calling getGroupAttachment");
      }
      // verify the required parameter 'xTurnitinIntegrationVersion' is set
      if (xTurnitinIntegrationVersion === undefined || xTurnitinIntegrationVersion === null) {
        throw new Error("Missing the required parameter 'xTurnitinIntegrationVersion' when calling getGroupAttachment");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getGroupAttachment");
      }
      // verify the required parameter 'attachId' is set
      if (attachId === undefined || attachId === null) {
        throw new Error("Missing the required parameter 'attachId' when calling getGroupAttachment");
      }

      let pathParams = {
        'group_id': groupId,
        'attach_id': attachId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Turnitin-Integration-Name': xTurnitinIntegrationName,
        'X-Turnitin-Integration-Version': xTurnitinIntegrationVersion
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GroupAttachmentResponse;
      return this.apiClient.callApi(
        '/groups/{group_id}/attachments/{attach_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupAttachments operation.
     * @callback module:api/GroupsApi~getGroupAttachmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all attachments
     * @param {String} xTurnitinIntegrationName a human readable string representing the type of integration being used
     * @param {String} xTurnitinIntegrationVersion the version of the integration platform being used
     * @param {String} groupId group_id
     * @param {module:api/GroupsApi~getGroupAttachmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    getGroupAttachments(xTurnitinIntegrationName, xTurnitinIntegrationVersion, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'xTurnitinIntegrationName' is set
      if (xTurnitinIntegrationName === undefined || xTurnitinIntegrationName === null) {
        throw new Error("Missing the required parameter 'xTurnitinIntegrationName' when calling getGroupAttachments");
      }
      // verify the required parameter 'xTurnitinIntegrationVersion' is set
      if (xTurnitinIntegrationVersion === undefined || xTurnitinIntegrationVersion === null) {
        throw new Error("Missing the required parameter 'xTurnitinIntegrationVersion' when calling getGroupAttachments");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getGroupAttachments");
      }

      let pathParams = {
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Turnitin-Integration-Name': xTurnitinIntegrationName,
        'X-Turnitin-Integration-Version': xTurnitinIntegrationVersion
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/groups/{group_id}/attachments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsGroupIdPut operation.
     * @callback module:api/GroupsApi~groupsGroupIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AggregateGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * upsert group, group context and group context owners info
     * @param {String} xTurnitinIntegrationName a human readable string representing the type of integration being used
     * @param {String} xTurnitinIntegrationVersion the version of the integration platform being used
     * @param {String} groupId group_id
     * @param {module:model/AggregateGroup} data 
     * @param {module:api/GroupsApi~groupsGroupIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AggregateGroup}
     */
    groupsGroupIdPut(xTurnitinIntegrationName, xTurnitinIntegrationVersion, groupId, data, callback) {
      let postBody = data;
      // verify the required parameter 'xTurnitinIntegrationName' is set
      if (xTurnitinIntegrationName === undefined || xTurnitinIntegrationName === null) {
        throw new Error("Missing the required parameter 'xTurnitinIntegrationName' when calling groupsGroupIdPut");
      }
      // verify the required parameter 'xTurnitinIntegrationVersion' is set
      if (xTurnitinIntegrationVersion === undefined || xTurnitinIntegrationVersion === null) {
        throw new Error("Missing the required parameter 'xTurnitinIntegrationVersion' when calling groupsGroupIdPut");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling groupsGroupIdPut");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling groupsGroupIdPut");
      }

      let pathParams = {
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Turnitin-Integration-Name': xTurnitinIntegrationName,
        'X-Turnitin-Integration-Version': xTurnitinIntegrationVersion
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AggregateGroup;
      return this.apiClient.callApi(
        '/groups/{group_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGroupAttachment operation.
     * @callback module:api/GroupsApi~updateGroupAttachmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupAttachmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patch a group attachment
     * @param {String} xTurnitinIntegrationName a human readable string representing the type of integration being used
     * @param {String} xTurnitinIntegrationVersion the version of the integration platform being used
     * @param {String} groupId group_id
     * @param {String} attachId The attachment ID (returned from a successful group attachment request) 
     * @param {module:model/AddGroupAttachmentRequest} data 
     * @param {module:api/GroupsApi~updateGroupAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupAttachmentResponse}
     */
    updateGroupAttachment(xTurnitinIntegrationName, xTurnitinIntegrationVersion, groupId, attachId, data, callback) {
      let postBody = data;
      // verify the required parameter 'xTurnitinIntegrationName' is set
      if (xTurnitinIntegrationName === undefined || xTurnitinIntegrationName === null) {
        throw new Error("Missing the required parameter 'xTurnitinIntegrationName' when calling updateGroupAttachment");
      }
      // verify the required parameter 'xTurnitinIntegrationVersion' is set
      if (xTurnitinIntegrationVersion === undefined || xTurnitinIntegrationVersion === null) {
        throw new Error("Missing the required parameter 'xTurnitinIntegrationVersion' when calling updateGroupAttachment");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling updateGroupAttachment");
      }
      // verify the required parameter 'attachId' is set
      if (attachId === undefined || attachId === null) {
        throw new Error("Missing the required parameter 'attachId' when calling updateGroupAttachment");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateGroupAttachment");
      }

      let pathParams = {
        'group_id': groupId,
        'attach_id': attachId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Turnitin-Integration-Name': xTurnitinIntegrationName,
        'X-Turnitin-Integration-Version': xTurnitinIntegrationVersion
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GroupAttachmentResponse;
      return this.apiClient.callApi(
        '/groups/{group_id}/attachments/{attach_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadGroupAttachment operation.
     * @callback module:api/GroupsApi~uploadGroupAttachmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload Submitted File
     * @param {String} xTurnitinIntegrationName a human readable string representing the type of integration being used
     * @param {String} xTurnitinIntegrationVersion the version of the integration platform being used
     * @param {String} groupId The Group ID (required to already exist) 
     * @param {String} attachId The attachment ID (returned from a successful group attachment request) 
     * @param {String} contentDisposition *must include the \"filename\" parameter, e.g. `inline; filename=\"MyFile.docx\"` 
     * @param {Object.<String, Object>} file the attachment file
     * @param {module:api/GroupsApi~uploadGroupAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessMessage}
     */
    uploadGroupAttachment(xTurnitinIntegrationName, xTurnitinIntegrationVersion, groupId, attachId, contentDisposition, file, callback) {
      let postBody = file;
      // verify the required parameter 'xTurnitinIntegrationName' is set
      if (xTurnitinIntegrationName === undefined || xTurnitinIntegrationName === null) {
        throw new Error("Missing the required parameter 'xTurnitinIntegrationName' when calling uploadGroupAttachment");
      }
      // verify the required parameter 'xTurnitinIntegrationVersion' is set
      if (xTurnitinIntegrationVersion === undefined || xTurnitinIntegrationVersion === null) {
        throw new Error("Missing the required parameter 'xTurnitinIntegrationVersion' when calling uploadGroupAttachment");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling uploadGroupAttachment");
      }
      // verify the required parameter 'attachId' is set
      if (attachId === undefined || attachId === null) {
        throw new Error("Missing the required parameter 'attachId' when calling uploadGroupAttachment");
      }
      // verify the required parameter 'contentDisposition' is set
      if (contentDisposition === undefined || contentDisposition === null) {
        throw new Error("Missing the required parameter 'contentDisposition' when calling uploadGroupAttachment");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling uploadGroupAttachment");
      }

      let pathParams = {
        'group_id': groupId,
        'attach_id': attachId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Turnitin-Integration-Name': xTurnitinIntegrationName,
        'X-Turnitin-Integration-Version': xTurnitinIntegrationVersion,
        'Content-Disposition': contentDisposition
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['binary/octet-stream'];
      let accepts = ['application/json'];
      let returnType = SuccessMessage;
      return this.apiClient.callApi(
        '/groups/{group_id}/attachments/{attach_id}/original', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
